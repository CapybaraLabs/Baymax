import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'idea'
    id 'java'
    alias(libs.plugins.gitprops)
    alias(libs.plugins.spring)
    id 'jacoco'
    alias(libs.plugins.sonar)
    alias(libs.plugins.versions)
}

group 'space.npstr.baymax'
version '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    // fucks with spring boot jar, we don't need it anyways
    compile.exclude module: 'opus-java'
}

dependencies {
    implementation platform(libs.spring.boot.bom)
    testRuntimeOnly platform(libs.spring.boot.bom)

    implementation libs.jda
    implementation libs.logback
    implementation libs.sentry
    implementation libs.snakeyaml
    implementation libs.caffeine
    implementation libs.emojis
    implementation libs.guava
    implementation libs.sqlite
    implementation libs.flyway

    //spring
    implementation libs.spring.boot.starter

    //testing
    testImplementation libs.junit.api
    testRuntimeOnly libs.junit.engine
}

dependencyUpdates.resolutionStrategy {
    componentSelection properReleasesOnly()
}

dependencyLocking {
    lockAllConfigurations()
}

// ./gradlew resolveAndLockAll --write-locks
task resolveAndLockAll {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.all {
            resolutionStrategy {
                componentSelection properReleasesOnly()
            }
        }
        configurations
                .findAll { it.canBeResolved }
                .each { it.resolve() }
    }
}

tasks.withType(JavaCompile) {
    dependsOn(clean, processResources)
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

bootRun {
    //compiling tests during bootRun increases the likelyhood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        //noinspection GroovyAssignabilityCheck
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveFileName.set("baymax.jar")
    doLast {
        copy {
            from 'build/libs/baymax.jar'
            into '.'
        }
    }
}

test {
    useJUnitPlatform()
    jacoco {
        includes['space.npstr.baymax.*']
    }
}

sonarqube {
    properties {
        property 'sonar.inclusions', 'src/main/java/space/npstr/baymax/**/*'
    }
}

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.name,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

static def properReleasesOnly() {
    return { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = [
                    'alpha', 'beta', 'rc', 'm1', 'm2', 'm3', 'm4', 'm5', 'm6', 'preview',
            ].any {
                q -> selection.candidate.version.toLowerCase().contains(q) && !selection.candidate.module.equals("JDA")
            }
            if (rejected) {
                selection.reject('Not a release')
            }
        }
    }
}
